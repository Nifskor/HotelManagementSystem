/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package dong.hotel.management;

import dong.hotel.check.CheckOutInformation;
import dong.hotel.check.RoomState;
import javax.swing.SwingConstants;
import javax.swing.table.DefaultTableCellRenderer;
import dong.hotel.file.ExceptionReport2working;
import dong.hotel.file.PeakSeasonPayProcess;
import dong.hotel.file.Sfr300Process;
import dong.hotel.reservation.PeakSeasonChargeInfo;
import java.io.IOException;
import java.lang.System.Logger;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.GregorianCalendar;
import java.util.logging.Level;
import javax.swing.table.DefaultTableModel;
/**
 *
 * @author nifskorea
 */
public class ExceptionReport extends javax.swing.JFrame {
    private ArrayList<ExceptionReportInfo> reportinfo = new ArrayList<>();
    private ArrayList<RoomState> roomstate = new ArrayList<>();
    private ArrayList<CheckOutInformation> checkout = new ArrayList<>();
    private ArrayList<PeakSeasonChargeInfo> chargeInfo = new ArrayList<>();

  /**
     * Creates new form ExceptionReport
     */
    public ExceptionReport() {
        initComponents();
         DefaultTableCellRenderer renderer
                = (DefaultTableCellRenderer) reporttable.getTableHeader().getDefaultRenderer();
        renderer.setHorizontalAlignment(SwingConstants.CENTER);
        reporttable.getTableHeader().setDefaultRenderer(renderer);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        B_Back = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        reporttable = new javax.swing.JTable();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jLabel1.setFont(new java.awt.Font("굴림", 0, 24)); // NOI18N
        jLabel1.setText("예외보고서");

        B_Back.setText("이전");
        B_Back.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                B_BackActionPerformed(evt);
            }
        });

        reporttable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "호실", "초과시간", "요금"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        reporttable.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        jScrollPane1.setViewportView(reporttable);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(171, 171, 171)
                                .addComponent(jLabel1))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(372, 372, 372)
                                .addComponent(B_Back, javax.swing.GroupLayout.PREFERRED_SIZE, 77, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(0, 14, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 43, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 243, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(B_Back)
                .addContainerGap(74, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void B_BackActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_B_BackActionPerformed
        ManagementMainMenu back = new ManagementMainMenu();
        back.setVisible(true);
        dispose();
    }//GEN-LAST:event_B_BackActionPerformed
public void Reporttableadd(java.awt.event.ActionEvent evt){
     try {
            DefaultTableModel report = (DefaultTableModel) reporttable.getModel();
            report.setNumRows(0);

            ExceptionReport2working freport = new ExceptionReport2working();
            freport.fRead();
            freport.sPlite();
            reportinfo = freport.returnExceptionReportInfo();

            for (int i = 0; i < reportinfo.size(); i++) {
                report.insertRow(report.getRowCount(), new Object[]{
                    reportinfo.get(i).getRoom(),
                    reportinfo.get(i).getOver(),
                    reportinfo.get(i).getExtra()
                });
            }
        } catch (IOException ex) {
            //Logger.getLogger(ExceptionReport.class.getName()).log(Level.SEVERE, null, ex);
            ex.printStackTrace();
        }
    
}
public void Addtionalcustom() throws IOException{
   PeakSeasonPayProcess sr = new PeakSeasonPayProcess();

        Sfr300Process a = new Sfr300Process();
        a.fRead();
        a.sPlite();

        roomstate = a.returnRoomState();

        String state = "full";
        String checkindate = null;
        String[] name = new String[2];
        int num = 0;

        a.CRead();
        a.CSplite();
        checkout = a.returnGuestInfo();
        String checkoutdate = null;
/*
        for (int i = 0; i < roomstate.size(); i++) {
            for (int j = 0; j < checkout.size(); j++) {
                if (roomstate.get(i).getRoomState().equals(state)
                        && roomstate.get(i).getBooker().equals(checkout.get(j).getBooker())
                        && roomstate.get(i).getRoom().equals(checkout.get(j).getRoom())) {
                    checkindate = roomstate.get(i).getDate();
                    String[] firstdate = checkindate.split("-");
                    Calendar FirstDate = new GregorianCalendar(Integer.parseInt(firstdate[0]),
                            Integer.parseInt(firstdate[1]), Integer.parseInt(firstdate[2])); //체크인시간

                    checkoutdate = checkout.get(j).getDate();
                    String[] seconddate = checkoutdate.split("-");
                    Calendar SecondDate = new GregorianCalendar(Integer.parseInt(seconddate[0]),
                            Integer.parseInt(seconddate[1]), Integer.parseInt(seconddate[2])); //체크아웃시간
                    long diffSec = (SecondDate.getTimeInMillis() - FirstDate.getTimeInMillis()) / 1000; //계산
                    long diffDays = Math.abs(diffSec / (24 * 60 * 60) + 1); //계산

                    int overNum = 0, extraFee = 0;
                    long fee = 0;
                    num = Integer.parseInt(checkout.get(j).getRoom());
                    sr.fRead(); //객실
                    sr.sPlite();
                    chargeInfo = sr.returnChargeInfo();
                    for (int k = 0; k < chargeInfo.size(); k++) {

                        if (chargeInfo.get(k).getRoom() == num && diffDays >= 1) { //객실 번호랑 번호가 같으면
                            if (Integer.parseInt(roomstate.get(i).getNum()) > Integer.parseInt(chargeInfo.get(i).getNumpeople())
                                    && Integer.parseInt(roomstate.get(i).getNum()) <= Integer.parseInt(chargeInfo.get(i).getMaxpeople())) {

                                overNum = Integer.parseInt(roomstate.get(i).getNum()) - Integer.parseInt(chargeInfo.get(i).getNumpeople());
                                extraFee = Integer.parseInt(chargeInfo.get(i).getExtracharge()) * overNum;
                                fee = diffDays * (Long.parseLong(chargeInfo.get(i).getRoomcharge()) + extraFee);
                                ExceptionReport2working exceptions = new ExceptionReport2working();
                                String in = null;
                                in = "객실 " + roomstate.get(i).getRoomNum() + " 추가인원" + " +" + (diffDays * extraFee);

                                if (in != null) {
                                    exceptions.fWrite(in);
                                }
                            }
                        }
                    }
                }
            }
        }*/
}
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
       try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(ExceptionReport.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(ExceptionReport.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(ExceptionReport.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(ExceptionReport.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        java.awt.EventQueue.invokeLater(new Runnable() {
            @Override
            public void run() {
                new ExceptionReport().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton B_Back;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable reporttable;
    // End of variables declaration//GEN-END:variables
}
